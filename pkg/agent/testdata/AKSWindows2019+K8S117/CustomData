<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    # C:\AzureData\provision.complete
    # MUST keep generating this file when CSE is done and do not change the name
    #  - It is used to avoid running CSE multiple times
    #  - Some customers use this file to check if CSE is done
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""
Start-Transcript -Path $LogFile
# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.17.7-hotfix.20200714/windowszip/v1.17.7-hotfix.20200714-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.17.7"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# Kubelet credential provider
$global:CredentialProviderURL = ""

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# Windows next-gen networking (Windows eBPF)
$global:EnableNextGenNetworking = [System.Convert]::ToBoolean("false");
$global:NextGenNetworkingURL = ""

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

$global:IsSkipCleanupNetwork = [System.Convert]::ToBoolean("false");

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\" -Force

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.42.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows" -Force
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    $windowsNextGenNetworkingScriptPath = "c:\AzureData\windows\nextgennetworking.ps1"
    if (Test-Path -Path $windowsNextGenNetworkingScriptPath) {
        . $windowsNextGenNetworkingScriptPath
    }

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Install-CredentialProvider -KubeDir $global:KubeDir -CustomCloudContainerRegistryDNSSuffix "" 

    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL

    if (Get-Command -Name "Start-InstallWindowsNextGenNetworkingIfNeeded" -ErrorAction SilentlyContinue) {
        Start-InstallWindowsNextGenNetworkingIfNeeded -EnableInstall $global:EnableNextGenNetworking -URL $global:NextGenNetworkingURL
    }

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"
    # $CSEResultFilePath is used to avoid running CSE multiple times
    Set-Content -Path $CSEResultFilePath -Value $global:ExitCode -Force
    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 
    # Please not use Write-Log or Logs-To-Events after Stop-Transcript
    Stop-Transcript

    # Remove the parameters in the log file to avoid leaking secrets
    $logs=Get-Content $LogFile | Where-Object {$_ -notmatch "^Host Application: "}
    $logs | Set-Content $LogFile

    Upload-GuestVMLogs -ExitCode $global:ExitCode
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        throw "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
}
