syntax = "proto3";

package nbcontract.v1;

// illustrative division only
message Configuration {
  // System Configuration
  bool DisableCustomData = ;
  string cluster_certificate_authority = 1;

  // only required until Secure TLS bootstrapping in place
  // would use kubelet identity after that.
  string tls_bootstrap_token = 2;

  // cluster/user config
  string kubernetes_version = 3; // Q: can this be auto-detected? Or is this part of specifying the desired node version?
  //string kube_binary_url = 4;      we should remove this kube_binary_url because it's mostly getting the value from kubernetesConfig.CustomKubeBinaryURL. But need to double check on the scripts side if CUSTOM_KUBE_BINARY_URL is not provided with a value, what default value will the KUBE_BINARY_URL be.
  string custom_kube_binary_url = 5;
  string kubeproxy_url = 6; //from kubernetesConfig.CustomKubeProxyImage
  ApiServerConfig apiserver_config = 7;
  string subscription_id = 8;
  string resource_group = 9;
  string location = 10;
  string vm_type = 11;  //either string "vmss" or "standard". Although it's calculated from Properties.AgentPoolProfiles, it seems better to just use this single variable as contract instead of an array of AgentPoolProfiles
  
  // string primary_availability_set = 12; removed as this can be calculated from vars AgentPoolProfiles.Size (but Karpenter probably doesn't have this), Name and AvailabilityProfile. Need to ensure ClusterID is generated before this.
  string primary_scale_set = 13; //this comes from NBC directly
  
  CloudProviderConfig cloud_provider_config = 14;
  IdentityConfiguration identity_configuration = 15;

  RuncConfig runc_config = 16;

  // ... and a bunch of user-specified config
  string RepoDepotEndpoint = 17;
  // initAKSCustomCloudFilepath is a const defined in const.go. We can move it to the GO binary. I don't understand why it's related to this. https://github.com/Azure/AgentBaker/blob/72d89371f4c90f45888068539cd15aadc4f52a8b/pkg/agent/variables.go#L57C2-L64C3
  string LinuxAdminUsername = 18;
  string TenantId = 19;
  bool UseInstanceMetadata = 20;
  LoadBalancerConfig LoadBalancerConfig = 21;
  ContainerdConfig containerd_config = 22;
  AgentPoolProfile AgentPoolProfile = 23;
  // bool is_vhd = 23; removed because it only depends on AgentPoolProfile.Distro
  GpuConfig gpu_config = 24;
  // bool is_sgx_node = 25; //removed as it only depends on var AgentPoolProfile.VmSize
  TeleportConfig teleport_config = 26;
  HttpProxyConfig http_proxy_configuration = 27;
  FeatureState SshStatus = 28;
  FeatureState unattended_upgrade_status = 29;
  string message_of_the_day = 30;
  string swap_file_size_mb = 31;
  KubeletConfiguration kubelet_configuration = 32;
  FeatureState hosts_config_agent_status = 33;
  CustomCaTrustConfig custom_ca_trust_config = 34;
  //string provision_output = 35; removed. const should be defined in the go binary.
  //string hyperkube_url = 36;  removed
  //string moby_version = 37; removed
  // string container_runtime = 38;removed
  //string cli_tool = 39; removed
  // bool needs_containerd = 40; removed
  //bool is_krustlet = 41; removed, it only depends on var AgentPoolProfile.WorkloadRuntime
  bool needs_docker_login = 42; //useless, will remove
  FeatureState ipv6_dual_stack_enabled = 43; //seems very specific to RP, discuss with Alex wrt Karpenter
  //string outbound_command = 44; removed. It depends on var AzureEnvironmentSpecConfig.CloudName and IsAKSCustomCloud. IsAKSCustomCloud is not in the contract because it's calculatable.
  bool enable_unattended_upgrade = 45; //seems the current API is messed up with naming, fix soon
  bool ensure_no_dupe_promiscuous_bridge = 46; //this is little weird, check cse_cmd.sh for actual condition. Devin: can be removed because it only depends on HasCalicoNetworkPolicy, which depends on NetworkPolicy that is already in the contract
  CustomSearchDomain custom_search_domain = 47;
  CustomLinuxOSConfig custom_linux_os_config = 48;

  CustomCloudConfig custom_cloud_config = 49;
  
  //we do not need these in the final contract, these are consts
  string cse_helper_filepath = 50;
  string cse_distro_helper_filepath = 51;
  string cse_install_filepath = 52;
  string cse_distro_install_filepath = 53;
  string cse_config_filepath = 54;

  string dhcpv6_service_filepath = 55;
  string dhcpv6_config_filepath = 56;

  string azure_private_registry_server = 57;
  string private_egress_proxy_address = 58;
  FeatureState artifact_streaming_enabled = 59;
  bool is_kata = 60; // we can calculate this on the VHD, will remove from final contract
  bool needs_cgorupv2 = 61; // we can calculate this on the VHD, will remove from final contract
}

message KubeletConfiguration {
  // TODO(ace): remove these/make api defensible
  repeated string kubelet_flags = 1;
  map<string, string> kubelet_node_labels = 2;
  repeated Taint taints = 3;
  repeated Taint startup_taints = 4;
  KubeletDiskType kubelet_disk_type = 5;
  bool kubelet_config_file_enabled = 6;
  string kubelet_config_file_content = 7;
}

enum FeatureState {
  FEATURE_STATE_UNSPECIFIED = 0;
  FEATURE_STATE_ENABLED = 1;
  FEATURE_STATE_DISABLED = 2;
}

//these seem all from datamodel
message IdentityConfiguration {
  IdentityType IdentityType = 1; // Q: I am assuming this is a better pattern than Oneof?
  string ServicePrincipalId = 2;
  string ServicePrincipalSecret = 3;
  string AssignedIdentityId = 4;  //could be user or system assigned, depending on the type
  // string use_managed_identity_extension = 5; removed as it's included in IdentityType
}

enum IdentityType {
  IDENTITY_TYPE_UNSPECIFIED = 0;
  IDENTITY_TYPE_SERVICE_PRINCIPAL = 1;
  IDENTITY_TYPE_SYSTEM_IDENTITY = 2;
  IDENTITY_TYPE_USER_IDENTITY = 3;
}

enum NetworkPluginType {
  NETWORK_PLUGIN_TYPE_UNSPECIFIED = 0;
  NETWORK_PLUGIN_TYPE_NONE = 1;
  NETWORK_PLUGIN_TYPE_AZURE = 2;
  NETWORK_PLUGIN_TYPE_KUBENET = 3;
}

enum NetworkPolicyType {
  NETWORK_POLICY_TYPE_UNSPECIFIED = 0;
  NETWORK_POLICY_TYPE_NONE = 1;
  NETWORK_POLICY_TYPE_AZURE = 2;
  NETWORK_POLICY_TYPE_CALICO = 3;
}

message HttpProxyConfig {
  optional string HttpProxy = 1; //we don't need to put optional because proto3 assumes all are optional by default. "Required" is not allowed too.
  optional string HttpsProxy = 2;
  repeated string NoProxy = 3;
  optional string TrustedCA = 4;
  //FeatureState http_proxy_config_status = 5; removed since the previous 4 vars should allow us to calculate this
  //FeatureState http_proxy_ca_config_status = 6; removed since the previous 4 vars should allow us to calculate this
}

message CustomCATrustConfig {
  //FeatureState custom_ca_trust_status = 1; removed since we can calculate from var CustomCATrustCerts. Check GetCustomCATrustConfigCerts in baker.go
  //int32 custom_ca_trust_count = 2;removed since we can calculate from var CustomCATrustCerts. Check GetCustomCATrustConfigCerts in baker.go
  repeated string CustomCATrustCerts = 3;
}

enum KubeletDiskType {
  KUBELET_DISK_TYPE_UNSPECIFIED = 0;
  KUBELET_DISK_TYPE_OS_DISK = 1;
  KUBELET_DISK_TYPE_TEMP_DISK = 2;
}

message Taint {
  string key = 1;
  string effect = 2;
}

message VirtualNetworkConfig {
  // string name = 1;  Removed this. This can be calculated from var AgentPoolProfiles.AreCustomVnet, AgentPoolProfiles.VnetSubnetId and var AKSClusterProperties.K8sOrchestratorName. Need to ensure ClusterID is generated before this.
  
  //removed this because we can calculte it from var AgentPoolProfiles.AreCustomVnet and var AgentPoolProfiles.VnetSubnetId. See GetVNetResourceGroupName() in types.go. However Karpenter probably doesn't have AgentPoolProfiles.
  //string resource_group = 2; 
  string VnetCniPluginsUrl = 1;
}

// all are from datamodel.KubernetesConfig directly
message CloudProviderConfig {
  CloudProviderBackoffConfig CloudProviderBackoffConfig = 1;
  CloudProviderRateLimitConfig CloudProviderRateLimitConfig = 2;
  bool CloudProviderDisableOutboundSNAT = 3;
}

message CloudProviderBackoffConfig {
  FeatureState Status = 1;
  string Mode = 2;
  int32 Retries = 3;
  double Exponent = 4;
  int32 Duration = 5;
  double Jitter = 6;
}

message CloudProviderRateLimitConfig {
  FeatureState Status = 1;
  double Qps = 2;
  double QpsWrite = 3;
  int32 Bucket = 4;
  int32 BucketWrite = 5;  
}

message LoadBalancerConfig {
  LoadBalancerSku Sku = 1;
  // bool exclude_master_from_standard_load_balancer = 2; removed as this is always true in variables.go
  int32 MaxRuleCount = 2;
}

enum LoadBalancerSku {
  LOAD_BALANCER_SKU_UNSPECIFIED = 0;
  LOAD_BALANCER_SKU_BASIC = 1;  // to be confirmed
  LOAD_BALANCER_SKU_STANDARD = 2;
}

enum NetworkMode {
  NETWORK_MODE_UNSPECIFIED = 0;
  NETWORK_MODE_L2BRIDGE = 1;
  //could be more. Needs to check.
}

message ApiServerConfig {
  string PublicKey = 1; // from certificateProfile.APIServerCertificate
  // string Name = 2; removed as it can be calculated from HostedMasterProfile, see GetKubernetesEndpoint in baker.go. Need to check if Karpenter has HostedMasterProfile.
  // string api_server_endpoint = 3;  //duplicate with Name
}

message GpuConfig {
  FeatureState status = 1; 
  //FeatureState is_mig_node = 2; removed. Can be calculated from gpu_instance_profile. Check IsMIGNode()
  FeatureState config_gpu_driver_if_needed = 3;    //we can revise this name later when we clearly understand what it's doing
  FeatureState enable_gpu_device_plugin_if_needed = 4; //we can revise this name later when we clearly understand what it's doing
  //FeatureState fabric_manager_status = 5;  removed. Only depends on var AgentPoolProfile.VmSize.
  // string gpu_driver_version = 6; removed. this is dependent only on VM size, can be calculated on the VHD
  string gpu_instance_profile = 7;
}

message ContainerdConfig {
  string DownloadUrlBase = 1;
  string Version = 2;
  string PackageUrl = 3;
}

message TeleportConfig {
  FeatureState status = 1;
  string teleportd_plugin_download_url = 2;
}

message RuncConfig {
  string runc_version = 1;
  string runc_package_url = 2;
}

message NetworkConfig {
  NetworkPluginType network_plugin = 1; //from datamodel.KubernetesConfig directly
  NetworkPolicyType network_policy = 2; //from datamodel.KubernetesConfig directly
  NetworkMode network_mode = 3;
  //string network_security_group = 4;  similar to subnet, should be able to removed. We can calculte it from AKSClusterProperties.K8sOrchestratorName and AgentPoolProfiles.VnetSubnetId. See GetSubnetName() in types.go. But need to make sure ClusterID is generated before this. 
  //(Devin To Anuj: it seems weird to me a get function GetClusterID() is writing to HostedMasterProfile. See if we want to fix it now or later)

  VirtualNetworkConfig VirtualNetworkConfig = 5;
  string CniPluginsUrl = 6;
  
  //string subnet = 8; removed this because we can calculte it from AKSClusterProperties.K8sOrchestratorName and AgentPoolProfiles.VnetSubnetId. See GetSubnetName() in types.go
  //string route_table = 9; similar to subnet, should be able to removed. Need to ensure ClusterID is generated before this.
}

message CustomSearchDomain {
  string custom_search_domain_filepath = 1;
  string custom_search_domain_name = 2;
  string custom_search_domain_realm_user = 3;
  string custom_search_domain_realm_password = 4;
}

message CustomLinuxOSConfig {
  //this should change, we should not have any should fields, either modify scripts or calculate them on VHD
  bool should_config_swap_file = 1;
  bool should_config_transparent_hugepage = 2;
  bool should_config_containerd_ulimits = 3;
  string swap_file_size_mb = 5;
  string transparent_hugepage = 6;
  string transparent_defrag = 7;
  optional SysctlConfig sysctl_config = 8;
  optional UlimitConfig ulimit_config = 9;
}

message TLSBootstrapping {
  // discuss whether this should be featureState or bool
  // understand how defaulting works for enum, because we want default to be false
  FeatureState tls_bootstrapping = 1;
  FeatureState secure_tls_bootstrapping = 2;
  string tls_bootstrap_token = 3;
  string custom_secure_tls_bootstrap_appserver_appid = 4;
}

message CustomCloudConfig {
  //string target_environment = 1;  removed. duplicate with target_cloud
  // string TargetCloud = 2;   removed as it only depends on var location.
  //bool is_custom_cloud = 3; removed. IsAKSCustomCloud can be calculated from var Name below
  string custom_env_json_content = 4; // can be generated on the VHD, also rename
  string Name = 5; //IsAKSCustomCloud can be calculated from cs.Properties.CustomCloudEnv.Name
  string Location = 6;  //GetTargetEnvironment only depends on location
}

message SysctlConfig {
  optional int32 NetCoreSomaxconn = 1;
  optional int32 NetCoreNetdevMaxBacklog = 2;
  optional int32 NetCoreRmemDefault = 3;
  optional int32 NetCoreRmemMax = 4;
  optional int32 NetCoreWmemDefault = 5;
  optional int32 NetCoreWmemMax = 6;
  optional int32 NetCoreOptmemMax = 7;
  optional int32 NetIpv4TcpMaxSynBacklog = 8;
  optional int32 NetIpv4TcpMaxTwBuckets = 9;
  optional int32 NetIpv4TcpFinTimeout = 10;
  optional int32 NetIpv4TcpKeepaliveTime = 11;
  optional int32 NetIpv4TcpKeepaliveProbes = 12;
  optional int32 NetIpv4TcpkeepaliveIntvl = 13;
  optional bool NetIpv4TcpTwReuse = 14;
  string NetIpv4IpLocalPortRange = 15;
  optional int32 NetIpv4NeighDefaultGcThresh1 = 16;
  optional int32 NetIpv4NeighDefaultGcThresh2 = 17;
  optional int32 NetIpv4NeighDefaultGcThresh3 = 18;
  optional int32 NetNetfilterNfConntrackMax = 19;
  optional int32 NetNetfilterNfConntrackBuckets = 20;
  optional int32 FsInotifyMaxUserWatches = 21;
  optional int32 FsFileMax = 22;
  optional int32 FsAioMaxNr = 23;
  optional int32 FsNrOpen = 24;
  optional int32 KernelThreadsMax = 25;
  optional int32 VMMaxMapCount = 26;
  optional int32 VMSwappiness = 27;
  optional int32 VMVfsCachePressure = 28;
}

message UlimitConfig {
  optional string NoFile = 1;
  optional string MaxLockedMemory = 2; 
}

message AgentPoolProfile {
  bool AreCustomVnet = 1;  //see AreAgentProfilesCustomVNET() in types.go. However Karpenter probably doesn't have AgentPoolProfiles.
  int32 ProfileSize = 2; //GetPrimaryAvailabilitySetName() in types.go checks this. We may be able to consolidate with other variables
  string VnetSubnetId = 3;  //this will be from AgentPoolProfiles[0].VnetSubnetID. However Karpenter probably doesn't have AgentPoolProfiles.
  string Name = 4;  //GetClusterID() depends on AgentPoolProfiles[0].Name. 
  string Distro = 5;  //isVHD depends on it
  string VmSize = 6;  //sgxNode depends on it
  WorkloadRuntime WorkloadRuntime = 7;  //IsKrustlet depends on it. WorkloadRuntime is actually just a string type

}

message AKSClusterProperties {
  string K8sOrchestratorName = 1;  // if we can resolve its dependency p.OrchestratorProfile.IsKubernetes(), we can also remove this.

}

message HostedMasterProfile {
  string IPAddress = 1;
  string FQDN = 2;
}

message AzureEnvironmentSpecConfig {
  string CloudName = 1; //GetOutboundCommand depends on this
}